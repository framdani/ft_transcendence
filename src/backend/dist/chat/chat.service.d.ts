import { roomRepository } from './room.repository';
import { RoomDto } from './dto/room-dto';
import { chatroom } from './room.entity';
import { membership } from './membership.entity';
import { Repository } from 'typeorm';
import { RoleStatus } from './dto/membership.model';
import { message } from './message.entity';
import { messageDto } from './dto/message-dto';
import { AuthService } from 'src/auth/auth.service';
import { PlayerRepository } from 'src/players/player.repository';
import { UsersService } from 'src/players/players.service';
import { Player } from 'src/players/player.entity';
import { memberDto } from './dto/member-dto';
import { RelationsService } from 'src/relations/relations.service';
export declare class ChatService {
    protected roomRepo: roomRepository;
    protected membershipRepo: Repository<membership>;
    protected messageRepo: Repository<message>;
    protected authService: AuthService;
    protected PlayerRepository: PlayerRepository;
    protected userService: UsersService;
    protected relationService: RelationsService;
    constructor(roomRepo: roomRepository, membershipRepo: Repository<membership>, messageRepo: Repository<message>, authService: AuthService, PlayerRepository: PlayerRepository, userService: UsersService, relationService: RelationsService);
    createRoom(RoomDto: RoomDto, creators: Player[]): Promise<chatroom>;
    createDM(sender: number, receiver: number): Promise<chatroom>;
    getRoomById(id: number): Promise<chatroom>;
    getRoomByName(name: string): Promise<chatroom>;
    getMembersByRoomId(roomid: number, playerid: number): Promise<memberDto[]>;
    getRoomsForUser(playerid: number): Promise<chatroom[]>;
    addMember(room: chatroom, creator: Player, role: RoleStatus): Promise<void>;
    createMessage(messageDto: messageDto, sender: Player): Promise<message>;
    getMessagesByroomId(roomid: number, playerid: number): Promise<message[]>;
    getDMs(userid: number, receiverid: number): Promise<message[]>;
    deleteMmebership(roomid: number, playrid: number): Promise<void>;
    isMember(roomid: number, playerid: number): Promise<membership>;
    getMembership(roomid: number, playerid: number): Promise<membership>;
    isBanned(roomid: number, playerid: number): Promise<boolean>;
    getAllRooms(playerid: number): Promise<chatroom[]>;
    getRole(roomid: number, playerid: number): Promise<membership>;
    createMembership(playerid: number, roomid: number): Promise<void>;
    DMexist(senderid: number, receiverid: number): Promise<chatroom>;
    updateMembership(playerid: number, roomid: number, role: RoleStatus): Promise<membership>;
    updatePassword(roomid: number, password: string): Promise<chatroom>;
    updateBanStatus(playerid: number, roomid: number, ban: boolean): Promise<membership>;
    updateMuteStatus(playerid: number, roomid: number, mute: boolean): Promise<membership>;
    validatingRoomPwd(room: chatroom, password: string): Promise<boolean>;
}
